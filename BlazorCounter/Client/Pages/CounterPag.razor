@page "/counterpag"
@using BlazorCounter.Client.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.DependencyInjection
@using System.Net.Http.Json
@using Syncfusion.Blazor.ProgressBar
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@attribute [Authorize]
@inject HttpClient Http

<CounterComp Skip = "Salto" Cont = "CurrentCount" OnSalva = "SalvaContatore" Up = "Su" Down = "Giu"/>

<SfProgressBar Type="ProgressType.Circular" Value="100" Height="60" Width="100%" TrackColor="#FFFFFF"
               ShowProgressValue="true" ProgressColor="#2BB20E" TrackThickness="24" CornerRadius="CornerType.Round"
               ProgressThickness="24" Minimum="0" Maximum="100">
    <ProgressBarAnimation Enable="true" Duration="10000" Delay="100"></ProgressBarAnimation>
</SfProgressBar>



@code {
    public Models.ContatoreCli? CurrentCount {  get; set; } = new Models.ContatoreCli();

    private string? apiUrl = @"http://localhost:5002/api/ContatoreSer";

    private int Salto = 1;

    protected override Task OnInitializedAsync()
    {
        return caricaEventi();
    }

    private async Task caricaEventi()
    {
        CurrentCount = await Http.GetFromJsonAsync<Models.ContatoreCli>($"{apiUrl}/{1}");
    }

    public async Task SalvaContatore(Models.ContatoreCli con)
    {
        await Http.PutAsJsonAsync($"{apiUrl}/{1}", con);
        await caricaEventi();
    }

    public void Su()
    {
        CurrentCount.Valore += Salto;

    }

    public void Giu()
    {
        CurrentCount.Valore -= Salto;
    }
}
